[2020.9.4]

If you arm a track and record, and there's no input set up, it crashes.  And by default, there is no input configured, you can only set one up by editing the project's JSON file.

Some interfaces (eg. Focusrite Scarlett 2i4) don't like it when we try to set the number of output channels (snd_pcm_hw_params_set_channels()).  Will need to deal with the channels we have, like we do with the input channels.

pthread_attr_setschedpolicy(SCHED_FIFO) sometimes need root privileges.  We don't know find that out until pthread_create() fails and we have no AudioEngine thread running.


[2020.9.7]

sched_get_priority_max is 99 (min is 1), but /etc/security/limits.d/99-realtime-privileges.conf has "rtprio 98" for the "realtime" group.  Reaper defaults to 40.  50 works (that is, pthread_create() doesn't fail with SCHED_FIFO); before we were using 99, so that's why it failed.

Scarlett 2i4 is interleaved.
	offset: 128, frames: 128
	area[0]: first: 0, step: 128 (16 bytes)
	area[1]: first: 32 (4 bytes), step: 128
	area[2]: first: 64 (8 bytes), step: 128
	area[3]: first: 96 (12 bytes), step: 128
	All have the same "addr".
	S32_LE.
HDA Intel PCH:
	offset: 128, frames: 128
	area[0]: first: 0, step: 64 (8 bytes)
	area[1]: first: 32 (4 bytes), step: 64
	Both had the same "addr".
	S32_LE.

memset()ing to clear empty channels causes bad audio on Scarlett, not on HDA.  My bad, I wasn't using "offset".  It toggles between 0 and 128 every send_data().

Turning off USE_ALSA_MMAP gives continuous xruns on either interface.


[2020.9.13]

Getting an "invalid-wav-file" error on recording start because we're trying to read from the file we're recording to.


[2020.9.14]

Track::run() is already not running the playlist when recording.  I'm seeing "missing read"s on a different track when starting recording.  The "invalid-wav-file" is on recording stop, because it's trying to read before Recorder::ArmedTrack::finish_wav_file() has updated the sizes.


[2020.10.2]

Changing the input of an armed track doesn't do AudioInterface::set_channel_armed(), which can lead to a crash in the Recorder when it tries to write the files.  SetTrackInputProcess::set() is supposed to do that... typo: it's setting it to false instead of true.


[2020.10.5]

Seeing some duplicate ids... Track::max_used_id() needs to account for clips as well.

Fixed 'invalid-wav-file' on record stop.  Now debugging missing reads, which happen a lot even on playback.  Why do all clips have file-start-frame of 256 (== 2 * cur_buffer_size)?  Anyway, play_frame is a big number (eg. 18446744073709426561/0xfffffffffffe1781).  That keeps the reads from happening.  Totally unintialized?  No, prepare_to_play() sets it.  Changing play_frame to signed gave warnings and didn't fix it.  Pinning next_play_frame to zero (and using it for the kick-out) fixes it, but probably reads ahead too early.


[2020.10.7]

32-bit signed frame count at 44.1k has a range of +/- 13.5 hours.  Should be enough, nonetheless I'm going with int64_t.

Clip 11 starts at 2.47873, read starts at 2.47293....

Fixed reading.  Now I'm seeing the last read in a clip sometimes doesn't get disposed as after it passes -- but not always.


[Live]

Bugs to fix:
	Missing reads.
	Duplicate ids (Track::max_used_id() needs to check clips).
	Why do clips have file-start-frame of 2 * cur_buffer_size?  Do we really have a bit of preroll?


